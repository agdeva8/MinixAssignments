#! /usr/bin/atf-sh

# Common settings and functions for the various resize_ffs tests.
# 

# called from atf_init_test_cases
setupvars()
{
	IMG=fsimage
	TDBASE64=$(atf_get_srcdir)/testdata.tar.gz.base64
	GOODMD5=$(atf_get_srcdir)/testdata.md5
	# set BYTESWAP to opposite-endian.
	if [ $(sysctl -n hw.byteorder) = "1234" ]; then
		BYTESWAP=be
	else
		BYTESWAP=le
	fi
}

# test_case() taken from the tests/ipf/h_common.sh
# Used to declare the atf goop for a test.
test_case()
{
	local name="${1}"; shift
	local check_function="${1}"; shift

	atf_test_case "${name}" cleanup
	eval "${name}_head() { \
		atf_set "require.user" "root" ; \
		atf_set "require.progs" "rump_ffs" ; \
	}"
	eval "${name}_body() { \
		${check_function} " "${@}" "; \
	}"
	eval "${name}_cleanup() { \
		umount -f mnt  ; \
		: reset error ; \
	}"
}

# Used to declare the atf goop for a test expected to fail.
test_case_xfail()
{
	local name="${1}"; shift
	local reason="${1}"; shift
	local check_function="${1}"; shift

	atf_test_case "${name}" cleanup
	eval "${name}_head() { \
		atf_set "require.user" "root" ; \
	}"
	eval "${name}_body() { \
		atf_expect_fail "${reason}" ; \
		${check_function} " "${@}" "; \
	}"
	eval "${name}_cleanup() { \
		umount -f mnt  ; \
		: reset error ; \
	}"
}

# copy_data requires the mount already done;  makes one copy of the test data
copy_data ()
{
	uudecode -p ${TDBASE64} | (cd mnt; tar xzf - -s/testdata/TD$1/)
}

copy_multiple ()
{
	local i
	for i in $(seq $1); do
		copy_data $i
	done
}

# remove_data removes one directory worth of test data; the purpose
# is to ensure data exists near the end of the fs under test.
remove_data ()
{
	rm -rf mnt/TD$1
}

remove_multiple ()
{
	local i
	for i in $(seq $1); do
		remove_data $i
	done
}

# verify that the data in a particular directory is still OK
# generated md5 file doesn't need explicit cleanup thanks to ATF
check_data ()
{
	(cd mnt/TD$1 && md5 *) > TD$1.md5
	atf_check diff -u ${GOODMD5} TD$1.md5
}

# supply begin and end arguments
check_data_range ()
{
	local i
	for i in $(seq $1 $2); do
		check_data $i
	done
}


resize_ffs()
{
	echo "in resize_ffs:" ${@}
	local bs=$1
	local fragsz=$2
	local osize=$3
	local nsize=$4
	local fslevel=$5
	local numdata=$6
	local swap=$7
	mkdir -p mnt
	echo "bs is ${bs} numdata is ${numdata}"
	echo "****resizing fs with blocksize ${bs}"

	# we want no more than 16K/inode to allow test files to copy.
	local fpi=$((fragsz * 4))
	local i
	if [ $fpi -gt 16384 ]; then
		i="-i 16384"
	fi
	if [ x$swap != x ]; then
		newfs -B ${BYTESWAP} -O${fslevel} -b ${bs} -f ${fragsz} \
			-s ${osize} ${i} -F ${IMG}
	else
		newfs -O${fslevel} -b ${bs} -f ${fragsz} -s ${osize} ${i} \
			-F ${IMG}
	fi

	# we're specifying relative paths, so rump_ffs warns - ignore.
	atf_check -s exit:0 -e ignore rump_ffs ${IMG} mnt
	copy_multiple ${numdata}

	if [ ${nsize} -lt ${osize} ]; then
	    # how much data to remove so fs can be shrunk
	    local remove=$((numdata-numdata*nsize/osize))
	    local dataleft=$((numdata-remove))
	    echo remove is $remove dataleft is $dataleft
	    remove_multiple ${remove}
	fi

	umount mnt
	atf_check -s exit:0 -o ignore resize_ffs -y -s ${nsize} ${IMG}
	atf_check -s exit:0 -o ignore fsck_ffs -f -n -F ${IMG}
	atf_check -s exit:0 -e ignore rump_ffs ${IMG} mnt
	if [ ${nsize} -lt ${osize} ]; then
	    check_data_range $((remove + 1)) ${numdata}
	else
	    # checking everything because we don't delete on grow
	    check_data_range 1 ${numdata}
	fi
	umount mnt
}
# $NetBSD: t_shrink.sh,v 1.7 2011/01/05 02:25:27 riz Exp $
#
# Copyright (c) 2010 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Jeffrey C. Rizzo.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#


# resize_ffs params as follows:
# resize_ffs blocksize fragsize fssize newfssize level numdata swap
# where 'numdata' is the number of data directories to copy - this is
# determined manually based on the maximum number that will fit in the
# created fs.  'level' is the fs-level (-O 0,1,2) passed to newfs.
# If 'swap' is included, byteswap the fs
test_case shrink_24M_16M_v0_4096 resize_ffs 4096 512 49152 32768 0 41
test_case shrink_24M_16M_v0_8192 resize_ffs 8192 1024 49152 32768 0 42
test_case shrink_24M_16M_v0_16384 resize_ffs 16384 2048 49152 32768 0 43
test_case shrink_24M_16M_v0_32768 resize_ffs 32768 4096 49152 32768 0 42
test_case shrink_24M_16M_v0_65536 resize_ffs 65536 8192 49152 32768 0 38
test_case shrink_32M_24M_v0_4096 resize_ffs 4096 512 65536 49152 0 55
test_case shrink_32M_24M_v0_8192 resize_ffs 8192 1024 65536 49152 0 56
test_case shrink_32M_24M_v0_16384 resize_ffs 16384 2048 65536 49152 0 58
test_case shrink_32M_24M_v0_32768 resize_ffs 32768 4096 65536 49152 0 56
test_case_xfail shrink_32M_24M_v0_65536 "PR bin/44204" resize_ffs 65536 8192 65536 49152 0 51
test_case shrink_48M_16M_v0_4096 resize_ffs 4096 512 98304 32768 0 82
test_case shrink_48M_16M_v0_8192 resize_ffs 8192 1024 98304 32768 0 84
test_case shrink_48M_16M_v0_16384 resize_ffs 16384 2048 98304 32768 0 87
test_case shrink_48M_16M_v0_32768 resize_ffs 32768 4096 98304 32768 0 83
test_case shrink_48M_16M_v0_65536 resize_ffs 65536 8192 98304 32768 0 76
test_case shrink_64M_48M_v0_4096 resize_ffs 4096 512 131072 98304 0 109
test_case shrink_64M_48M_v0_8192 resize_ffs 8192 1024 131072 98304 0 111
test_case shrink_64M_48M_v0_16384 resize_ffs 16384 2048 131072 98304 0 115
test_case shrink_64M_48M_v0_32768 resize_ffs 32768 4096 131072 98304 0 111
test_case shrink_64M_48M_v0_65536 resize_ffs 65536 8192 131072 98304 0 101

test_case shrink_24M_16M_v1_4096 resize_ffs 4096 512 49152 32768 1 41
test_case shrink_24M_16M_v1_8192 resize_ffs 8192 1024 49152 32768 1 42
test_case shrink_24M_16M_v1_16384 resize_ffs 16384 2048 49152 32768 1 43
test_case shrink_24M_16M_v1_32768 resize_ffs 32768 4096 49152 32768 1 42
test_case shrink_24M_16M_v1_65536 resize_ffs 65536 8192 49152 32768 1 38
test_case shrink_32M_24M_v1_4096 resize_ffs 4096 512 65536 49152 1 55
test_case shrink_32M_24M_v1_8192 resize_ffs 8192 1024 65536 49152 1 56
test_case shrink_32M_24M_v1_16384 resize_ffs 16384 2048 65536 49152 1 58
test_case shrink_32M_24M_v1_32768 resize_ffs 32768 4096 65536 49152 1 56
test_case_xfail shrink_32M_24M_v1_65536 "PR bin/44204" resize_ffs 65536 8192 65536 49152 1 51
test_case shrink_48M_16M_v1_4096 resize_ffs 4096 512 98304 32768 1 82
test_case shrink_48M_16M_v1_8192 resize_ffs 8192 1024 98304 32768 1 84
test_case shrink_48M_16M_v1_16384 resize_ffs 16384 2048 98304 32768 1 87
test_case shrink_48M_16M_v1_32768 resize_ffs 32768 4096 98304 32768 1 83
test_case shrink_48M_16M_v1_65536 resize_ffs 65536 8192 98304 32768 1 76
test_case shrink_64M_48M_v1_4096 resize_ffs 4096 512 131072 98304 1 109
test_case shrink_64M_48M_v1_8192 resize_ffs 8192 1024 131072 98304 1 111
test_case shrink_64M_48M_v1_16384 resize_ffs 16384 2048 131072 98304 1 115
test_case shrink_64M_48M_v1_32768 resize_ffs 32768 4096 131072 98304 1 111
test_case shrink_64M_48M_v1_65536 resize_ffs 65536 8192 131072 98304 1 101

test_case_xfail shrink_24M_16M_v2_4096 "PR bin/44205" resize_ffs 4096 512 49152 32768 2 41
test_case_xfail shrink_24M_16M_v2_8192 "PR bin/44205" resize_ffs 8192 1024 49152 32768 2 42
test_case_xfail shrink_24M_16M_v2_16384 "PR bin/44205" resize_ffs 16384 2048 49152 32768 2 43
test_case_xfail shrink_24M_16M_v2_32768 "PR bin/44205" resize_ffs 32768 4096 49152 32768 2 42
test_case_xfail shrink_24M_16M_v2_65536 "PR bin/44205" resize_ffs 65536 8192 49152 32768 2 38
test_case_xfail shrink_32M_24M_v2_4096 "PR bin/44205" resize_ffs 4096 512 65536 49152 2 55
test_case_xfail shrink_32M_24M_v2_8192 "PR bin/44205" resize_ffs 8192 1024 65536 49152 2 56
test_case_xfail shrink_32M_24M_v2_16384 "PR bin/44205" resize_ffs 16384 2048 65536 49152 2 58
test_case_xfail shrink_32M_24M_v2_32768 "PR bin/44205" resize_ffs 32768 4096 65536 49152 2 56
test_case_xfail shrink_32M_24M_v2_65536 "PR bin/44204" resize_ffs 65536 8192 65536 49152 2 51
test_case_xfail shrink_48M_16M_v2_4096 "PR bin/44205" resize_ffs 4096 512 98304 32768 2 82
test_case_xfail shrink_48M_16M_v2_8192 "PR bin/44205" resize_ffs 8192 1024 98304 32768 2 84
test_case_xfail shrink_48M_16M_v2_16384 "PR bin/44205" resize_ffs 16384 2048 98304 32768 2 87
test_case_xfail shrink_48M_16M_v2_32768 "PR bin/44205" resize_ffs 32768 4096 98304 32768 2 83
test_case_xfail shrink_48M_16M_v2_65536 "PR bin/44205" resize_ffs 65536 8192 98304 32768 2 76
test_case_xfail shrink_64M_48M_v2_4096 "PR bin/44205" resize_ffs 4096 512 131072 98304 2 109
test_case_xfail shrink_64M_48M_v2_8192 "PR bin/44205" resize_ffs 8192 1024 131072 98304 2 111
test_case_xfail shrink_64M_48M_v2_16384 "PR bin/44205" resize_ffs 16384 2048 131072 98304 2 115
test_case_xfail shrink_64M_48M_v2_32768 "PR bin/44205" resize_ffs 32768 4096 131072 98304 2 111
test_case_xfail shrink_64M_48M_v2_65536 "PR bin/44205" resize_ffs 65536 8192 131072 98304 2 101


atf_test_case shrink_ffsv1_partial_cg
shrink_ffsv1_partial_cg_head()
{
	atf_set "descr" "Checks successful shrinkage of ffsv1 by" \
			"less than a cylinder group"
}
shrink_ffsv1_partial_cg_body()
{
	echo "*** resize_ffs shrinkage partial cg test"

	atf_check -o ignore -e ignore newfs -V1 -F -s 5760 ${IMG}

	# shrink so there's a partial cg at the end
	atf_check -s exit:0 resize_ffs -s 4000 -y ${IMG}
	atf_check -s exit:0 -o ignore fsck_ffs -f -n -F ${IMG}
}

atf_init_test_cases()
{
	setupvars
	atf_add_test_case shrink_24M_16M_v0_32768
	atf_add_test_case shrink_24M_16M_v1_65536
	atf_add_test_case shrink_24M_16M_v2_4096
if [ "${RESIZE_FFS_ALL_TESTS-X}" != "X" ]; then
	atf_add_test_case shrink_24M_16M_v0_4096
	atf_add_test_case shrink_24M_16M_v0_8192
	atf_add_test_case shrink_24M_16M_v0_16384
	atf_add_test_case shrink_24M_16M_v0_65536
	atf_add_test_case shrink_24M_16M_v1_4096
	atf_add_test_case shrink_24M_16M_v1_8192
	atf_add_test_case shrink_24M_16M_v1_16384
	atf_add_test_case shrink_24M_16M_v1_32768
	atf_add_test_case shrink_24M_16M_v2_8192
	atf_add_test_case shrink_24M_16M_v2_16384
	atf_add_test_case shrink_24M_16M_v2_32768
	atf_add_test_case shrink_24M_16M_v2_65536
	atf_add_test_case shrink_32M_24M_v0_4096
	atf_add_test_case shrink_32M_24M_v0_8192
	atf_add_test_case shrink_32M_24M_v0_16384
	atf_add_test_case shrink_32M_24M_v0_32768
	atf_add_test_case shrink_32M_24M_v0_65536
	atf_add_test_case shrink_48M_16M_v0_4096
	atf_add_test_case shrink_48M_16M_v0_8192
	atf_add_test_case shrink_48M_16M_v0_16384
	atf_add_test_case shrink_48M_16M_v0_32768
	atf_add_test_case shrink_48M_16M_v0_65536
	atf_add_test_case shrink_64M_48M_v0_4096
	atf_add_test_case shrink_64M_48M_v0_8192
	atf_add_test_case shrink_64M_48M_v0_16384
	atf_add_test_case shrink_64M_48M_v0_32768
	atf_add_test_case shrink_64M_48M_v0_65536
	atf_add_test_case shrink_32M_24M_v1_4096
	atf_add_test_case shrink_32M_24M_v1_8192
	atf_add_test_case shrink_32M_24M_v1_16384
	atf_add_test_case shrink_32M_24M_v1_32768
	atf_add_test_case shrink_32M_24M_v1_65536
	atf_add_test_case shrink_48M_16M_v1_4096
	atf_add_test_case shrink_48M_16M_v1_8192
	atf_add_test_case shrink_48M_16M_v1_16384
	atf_add_test_case shrink_48M_16M_v1_32768
	atf_add_test_case shrink_48M_16M_v1_65536
	atf_add_test_case shrink_64M_48M_v1_4096
	atf_add_test_case shrink_64M_48M_v1_8192
	atf_add_test_case shrink_64M_48M_v1_16384
	atf_add_test_case shrink_64M_48M_v1_32768
	atf_add_test_case shrink_64M_48M_v1_65536
	atf_add_test_case shrink_32M_24M_v2_4096
	atf_add_test_case shrink_32M_24M_v2_8192
	atf_add_test_case shrink_32M_24M_v2_16384
	atf_add_test_case shrink_32M_24M_v2_32768
	atf_add_test_case shrink_32M_24M_v2_65536
	atf_add_test_case shrink_48M_16M_v2_4096
	atf_add_test_case shrink_48M_16M_v2_8192
	atf_add_test_case shrink_48M_16M_v2_16384
	atf_add_test_case shrink_48M_16M_v2_32768
	atf_add_test_case shrink_48M_16M_v2_65536
	atf_add_test_case shrink_64M_48M_v2_4096
	atf_add_test_case shrink_64M_48M_v2_8192
	atf_add_test_case shrink_64M_48M_v2_16384
	atf_add_test_case shrink_64M_48M_v2_32768
	atf_add_test_case shrink_64M_48M_v2_65536
fi
	atf_add_test_case shrink_ffsv1_partial_cg
}
